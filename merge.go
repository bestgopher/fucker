package sort

// 归并排序
// 分支法：
// 	1.分解：
//		如果输入值的规格小于确定的阈值(如果一个或者两个元素)，我们就通过使用直接了当的方法来解决这些问题并返回所获的的答案。
//		否则，我们把输入值分解为两个或者更多的互斥子集。
//	2.解决子问题：
//		递归地解决这些与子集相关的子问题
//	3.合并：
//		整理这些子问题的解，然后把它们合并成一个整体用以解决最开始的问题。
//
// 归并排序执行过程：
//  1.分解：
// 		若S只有0个或者1个元素，直接返回S；此时它已经完成排序了。否则(若S有至少2个元素)，从S中移除所有的元素，然后将它们放在
//		S1、S2两个子序列中，每个序列包含S中一般的元素。这就是说，S1包含S前一半的元素，S2包含S后一半的元素。
//	2.解决子问题：
//		递归地对S1和S2进行排序。
//	3.合并：
//		把这些分别在S1和S2中排好序的元素拿出来并按照顺序合并到S序列中
// 图示：
//		85 24 63 45 17 31 96 50
// -->  85 24 63 45		17 31 96 50
// --> 	85 24	63 45 	17 31	96 50
// -->  24 85	45 63	17 31	50 96
// -->  24 45 85 63		17 31 50 96
// -->	17 24 31 45 50 63 85 96
func MergeSort(data []int) {
	n := len(data)
	if n < 2 {
		return
	}

	mid := n / 2
	s1 := data[0:mid]
	s2 := data[mid:n]
	MergeSort(s1)
	MergeSort(s2)
	merge(s1, s2, data)
}

// 合并2个已排序的序列s1和s2到s中.
func merge(s1, s2, s []int) {
	s3 := make([]int, len(s1))
	copy(s3, s1)
	s4 := make([]int, len(s2))
	copy(s4, s2)

	for i, j := 0, 0; i+j < len(s); {
		if j == len(s4) || (i < len(s3) && s3[i] < s4[j]) {
			s[i+j] = s3[i]
			i++
		} else {
			s[i+j] = s4[j]
			j++
		}
	}
}
